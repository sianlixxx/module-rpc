/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.busap.rpc.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-27")
public class ThriftSParameter implements org.apache.thrift.TBase<ThriftSParameter, ThriftSParameter._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftSParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSParameter");

  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("Index", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ContentType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("Compression", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField HAS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("HasValue", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("Value", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSParameterTupleSchemeFactory());
  }

  public byte Index; // required
  public String Name; // required
  public String Type; // required
  public String ContentType; // required
  /**
   * 
   * @see ThriftSCompression
   */
  public ThriftSCompression Compression; // required
  public boolean HasValue; // required
  public ByteBuffer Value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX((short)1, "Index"),
    NAME((short)2, "Name"),
    TYPE((short)3, "Type"),
    CONTENT_TYPE((short)4, "ContentType"),
    /**
     * 
     * @see ThriftSCompression
     */
    COMPRESSION((short)5, "Compression"),
    HAS_VALUE((short)6, "HasValue"),
    VALUE((short)7, "Value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX
          return INDEX;
        case 2: // NAME
          return NAME;
        case 3: // TYPE
          return TYPE;
        case 4: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 5: // COMPRESSION
          return COMPRESSION;
        case 6: // HAS_VALUE
          return HAS_VALUE;
        case 7: // VALUE
          return VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private static final int __HASVALUE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("Index", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("Name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("Type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ContentType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPRESSION, new org.apache.thrift.meta_data.FieldMetaData("Compression", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftSCompression.class)));
    tmpMap.put(_Fields.HAS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("HasValue", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("Value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSParameter.class, metaDataMap);
  }

  public ThriftSParameter() {
    this.Compression = ThriftSCompression.None;

    this.HasValue = true;

  }

  public ThriftSParameter(
    byte Index,
    String Name,
    String Type,
    String ContentType,
    ThriftSCompression Compression,
    boolean HasValue)
  {
    this();
    this.Index = Index;
    setIndexIsSet(true);
    this.Name = Name;
    this.Type = Type;
    this.ContentType = ContentType;
    this.Compression = Compression;
    this.HasValue = HasValue;
    setHasValueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSParameter(ThriftSParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.Index = other.Index;
    if (other.isSetName()) {
      this.Name = other.Name;
    }
    if (other.isSetType()) {
      this.Type = other.Type;
    }
    if (other.isSetContentType()) {
      this.ContentType = other.ContentType;
    }
    if (other.isSetCompression()) {
      this.Compression = other.Compression;
    }
    this.HasValue = other.HasValue;
    if (other.isSetValue()) {
      this.Value = org.apache.thrift.TBaseHelper.copyBinary(other.Value);
    }
  }

  public ThriftSParameter deepCopy() {
    return new ThriftSParameter(this);
  }

  @Override
  public void clear() {
    setIndexIsSet(false);
    this.Index = 0;
    this.Name = null;
    this.Type = null;
    this.ContentType = null;
    this.Compression = ThriftSCompression.None;

    this.HasValue = true;

    this.Value = null;
  }

  public byte getIndex() {
    return this.Index;
  }

  public ThriftSParameter setIndex(byte Index) {
    this.Index = Index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  /** Returns true if field Index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
  }

  public String getName() {
    return this.Name;
  }

  public ThriftSParameter setName(String Name) {
    this.Name = Name;
    return this;
  }

  public void unsetName() {
    this.Name = null;
  }

  /** Returns true if field Name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.Name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.Name = null;
    }
  }

  public String getType() {
    return this.Type;
  }

  public ThriftSParameter setType(String Type) {
    this.Type = Type;
    return this;
  }

  public void unsetType() {
    this.Type = null;
  }

  /** Returns true if field Type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.Type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.Type = null;
    }
  }

  public String getContentType() {
    return this.ContentType;
  }

  public ThriftSParameter setContentType(String ContentType) {
    this.ContentType = ContentType;
    return this;
  }

  public void unsetContentType() {
    this.ContentType = null;
  }

  /** Returns true if field ContentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.ContentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.ContentType = null;
    }
  }

  /**
   * 
   * @see ThriftSCompression
   */
  public ThriftSCompression getCompression() {
    return this.Compression;
  }

  /**
   * 
   * @see ThriftSCompression
   */
  public ThriftSParameter setCompression(ThriftSCompression Compression) {
    this.Compression = Compression;
    return this;
  }

  public void unsetCompression() {
    this.Compression = null;
  }

  /** Returns true if field Compression is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression() {
    return this.Compression != null;
  }

  public void setCompressionIsSet(boolean value) {
    if (!value) {
      this.Compression = null;
    }
  }

  public boolean isHasValue() {
    return this.HasValue;
  }

  public ThriftSParameter setHasValue(boolean HasValue) {
    this.HasValue = HasValue;
    setHasValueIsSet(true);
    return this;
  }

  public void unsetHasValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASVALUE_ISSET_ID);
  }

  /** Returns true if field HasValue is set (has been assigned a value) and false otherwise */
  public boolean isSetHasValue() {
    return EncodingUtils.testBit(__isset_bitfield, __HASVALUE_ISSET_ID);
  }

  public void setHasValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASVALUE_ISSET_ID, value);
  }

  public byte[] getValue() {
    setValue(org.apache.thrift.TBaseHelper.rightSize(Value));
    return Value == null ? null : Value.array();
  }

  public ByteBuffer bufferForValue() {
    return org.apache.thrift.TBaseHelper.copyBinary(Value);
  }

  public ThriftSParameter setValue(byte[] Value) {
    this.Value = Value == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(Value, Value.length));
    return this;
  }

  public ThriftSParameter setValue(ByteBuffer Value) {
    this.Value = org.apache.thrift.TBaseHelper.copyBinary(Value);
    return this;
  }

  public void unsetValue() {
    this.Value = null;
  }

  /** Returns true if field Value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.Value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.Value = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Byte)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((String)value);
      }
      break;

    case COMPRESSION:
      if (value == null) {
        unsetCompression();
      } else {
        setCompression((ThriftSCompression)value);
      }
      break;

    case HAS_VALUE:
      if (value == null) {
        unsetHasValue();
      } else {
        setHasValue((Boolean)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX:
      return Byte.valueOf(getIndex());

    case NAME:
      return getName();

    case TYPE:
      return getType();

    case CONTENT_TYPE:
      return getContentType();

    case COMPRESSION:
      return getCompression();

    case HAS_VALUE:
      return Boolean.valueOf(isHasValue());

    case VALUE:
      return getValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX:
      return isSetIndex();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case CONTENT_TYPE:
      return isSetContentType();
    case COMPRESSION:
      return isSetCompression();
    case HAS_VALUE:
      return isSetHasValue();
    case VALUE:
      return isSetValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSParameter)
      return this.equals((ThriftSParameter)that);
    return false;
  }

  public boolean equals(ThriftSParameter that) {
    if (that == null)
      return false;

    boolean this_present_Index = true;
    boolean that_present_Index = true;
    if (this_present_Index || that_present_Index) {
      if (!(this_present_Index && that_present_Index))
        return false;
      if (this.Index != that.Index)
        return false;
    }

    boolean this_present_Name = true && this.isSetName();
    boolean that_present_Name = true && that.isSetName();
    if (this_present_Name || that_present_Name) {
      if (!(this_present_Name && that_present_Name))
        return false;
      if (!this.Name.equals(that.Name))
        return false;
    }

    boolean this_present_Type = true && this.isSetType();
    boolean that_present_Type = true && that.isSetType();
    if (this_present_Type || that_present_Type) {
      if (!(this_present_Type && that_present_Type))
        return false;
      if (!this.Type.equals(that.Type))
        return false;
    }

    boolean this_present_ContentType = true && this.isSetContentType();
    boolean that_present_ContentType = true && that.isSetContentType();
    if (this_present_ContentType || that_present_ContentType) {
      if (!(this_present_ContentType && that_present_ContentType))
        return false;
      if (!this.ContentType.equals(that.ContentType))
        return false;
    }

    boolean this_present_Compression = true && this.isSetCompression();
    boolean that_present_Compression = true && that.isSetCompression();
    if (this_present_Compression || that_present_Compression) {
      if (!(this_present_Compression && that_present_Compression))
        return false;
      if (!this.Compression.equals(that.Compression))
        return false;
    }

    boolean this_present_HasValue = true;
    boolean that_present_HasValue = true;
    if (this_present_HasValue || that_present_HasValue) {
      if (!(this_present_HasValue && that_present_HasValue))
        return false;
      if (this.HasValue != that.HasValue)
        return false;
    }

    boolean this_present_Value = true && this.isSetValue();
    boolean that_present_Value = true && that.isSetValue();
    if (this_present_Value || that_present_Value) {
      if (!(this_present_Value && that_present_Value))
        return false;
      if (!this.Value.equals(that.Value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Index = true;
    list.add(present_Index);
    if (present_Index)
      list.add(Index);

    boolean present_Name = true && (isSetName());
    list.add(present_Name);
    if (present_Name)
      list.add(Name);

    boolean present_Type = true && (isSetType());
    list.add(present_Type);
    if (present_Type)
      list.add(Type);

    boolean present_ContentType = true && (isSetContentType());
    list.add(present_ContentType);
    if (present_ContentType)
      list.add(ContentType);

    boolean present_Compression = true && (isSetCompression());
    list.add(present_Compression);
    if (present_Compression)
      list.add(Compression.getValue());

    boolean present_HasValue = true;
    list.add(present_HasValue);
    if (present_HasValue)
      list.add(HasValue);

    boolean present_Value = true && (isSetValue());
    list.add(present_Value);
    if (present_Value)
      list.add(Value);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftSParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Index, other.Index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Name, other.Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Type, other.Type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ContentType, other.ContentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompression()).compareTo(other.isSetCompression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Compression, other.Compression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasValue()).compareTo(other.isSetHasValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.HasValue, other.HasValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Value, other.Value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSParameter(");
    boolean first = true;

    sb.append("Index:");
    sb.append(this.Index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Name:");
    if (this.Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Type:");
    if (this.Type == null) {
      sb.append("null");
    } else {
      sb.append(this.Type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ContentType:");
    if (this.ContentType == null) {
      sb.append("null");
    } else {
      sb.append(this.ContentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Compression:");
    if (this.Compression == null) {
      sb.append("null");
    } else {
      sb.append(this.Compression);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("HasValue:");
    sb.append(this.HasValue);
    first = false;
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("Value:");
      if (this.Value == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.Value, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'Index' because it's a primitive and you chose the non-beans generator.
    if (Name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Name' was not present! Struct: " + toString());
    }
    if (Type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Type' was not present! Struct: " + toString());
    }
    if (ContentType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ContentType' was not present! Struct: " + toString());
    }
    if (Compression == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Compression' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'HasValue' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSParameterStandardSchemeFactory implements SchemeFactory {
    public ThriftSParameterStandardScheme getScheme() {
      return new ThriftSParameterStandardScheme();
    }
  }

  private static class ThriftSParameterStandardScheme extends StandardScheme<ThriftSParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.Index = iprot.readByte();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ContentType = iprot.readString();
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Compression = ThriftSCompression.findByValue(iprot.readI32());
              struct.setCompressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HAS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.HasValue = iprot.readBool();
              struct.setHasValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Value = iprot.readBinary();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIndex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'Index' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHasValue()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'HasValue' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeByte(struct.Index);
      oprot.writeFieldEnd();
      if (struct.Name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.Name);
        oprot.writeFieldEnd();
      }
      if (struct.Type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.Type);
        oprot.writeFieldEnd();
      }
      if (struct.ContentType != null) {
        oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.ContentType);
        oprot.writeFieldEnd();
      }
      if (struct.Compression != null) {
        oprot.writeFieldBegin(COMPRESSION_FIELD_DESC);
        oprot.writeI32(struct.Compression.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_VALUE_FIELD_DESC);
      oprot.writeBool(struct.HasValue);
      oprot.writeFieldEnd();
      if (struct.Value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeBinary(struct.Value);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSParameterTupleSchemeFactory implements SchemeFactory {
    public ThriftSParameterTupleScheme getScheme() {
      return new ThriftSParameterTupleScheme();
    }
  }

  private static class ThriftSParameterTupleScheme extends TupleScheme<ThriftSParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeByte(struct.Index);
      oprot.writeString(struct.Name);
      oprot.writeString(struct.Type);
      oprot.writeString(struct.ContentType);
      oprot.writeI32(struct.Compression.getValue());
      oprot.writeBool(struct.HasValue);
      BitSet optionals = new BitSet();
      if (struct.isSetValue()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetValue()) {
        oprot.writeBinary(struct.Value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.Index = iprot.readByte();
      struct.setIndexIsSet(true);
      struct.Name = iprot.readString();
      struct.setNameIsSet(true);
      struct.Type = iprot.readString();
      struct.setTypeIsSet(true);
      struct.ContentType = iprot.readString();
      struct.setContentTypeIsSet(true);
      struct.Compression = ThriftSCompression.findByValue(iprot.readI32());
      struct.setCompressionIsSet(true);
      struct.HasValue = iprot.readBool();
      struct.setHasValueIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.Value = iprot.readBinary();
        struct.setValueIsSet(true);
      }
    }
  }

}

