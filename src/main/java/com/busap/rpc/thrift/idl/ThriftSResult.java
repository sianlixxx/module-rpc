/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.busap.rpc.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-27")
public class ThriftSResult implements org.apache.thrift.TBase<ThriftSResult, ThriftSResult._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftSResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSResult");

  private static final org.apache.thrift.protocol.TField CONTENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ContentType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("Compression", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("Data", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSResultTupleSchemeFactory());
  }

  public String ContentType; // required
  /**
   * 
   * @see ThriftSCompression
   */
  public ThriftSCompression Compression; // required
  public ByteBuffer Data; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTENT_TYPE((short)1, "ContentType"),
    /**
     * 
     * @see ThriftSCompression
     */
    COMPRESSION((short)2, "Compression"),
    DATA((short)3, "Data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTENT_TYPE
          return CONTENT_TYPE;
        case 2: // COMPRESSION
          return COMPRESSION;
        case 3: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ContentType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPRESSION, new org.apache.thrift.meta_data.FieldMetaData("Compression", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftSCompression.class)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("Data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSResult.class, metaDataMap);
  }

  public ThriftSResult() {
    this.Compression = ThriftSCompression.None;

  }

  public ThriftSResult(
    String ContentType,
    ThriftSCompression Compression)
  {
    this();
    this.ContentType = ContentType;
    this.Compression = Compression;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSResult(ThriftSResult other) {
    if (other.isSetContentType()) {
      this.ContentType = other.ContentType;
    }
    if (other.isSetCompression()) {
      this.Compression = other.Compression;
    }
    if (other.isSetData()) {
      this.Data = org.apache.thrift.TBaseHelper.copyBinary(other.Data);
    }
  }

  public ThriftSResult deepCopy() {
    return new ThriftSResult(this);
  }

  @Override
  public void clear() {
    this.ContentType = null;
    this.Compression = ThriftSCompression.None;

    this.Data = null;
  }

  public String getContentType() {
    return this.ContentType;
  }

  public ThriftSResult setContentType(String ContentType) {
    this.ContentType = ContentType;
    return this;
  }

  public void unsetContentType() {
    this.ContentType = null;
  }

  /** Returns true if field ContentType is set (has been assigned a value) and false otherwise */
  public boolean isSetContentType() {
    return this.ContentType != null;
  }

  public void setContentTypeIsSet(boolean value) {
    if (!value) {
      this.ContentType = null;
    }
  }

  /**
   * 
   * @see ThriftSCompression
   */
  public ThriftSCompression getCompression() {
    return this.Compression;
  }

  /**
   * 
   * @see ThriftSCompression
   */
  public ThriftSResult setCompression(ThriftSCompression Compression) {
    this.Compression = Compression;
    return this;
  }

  public void unsetCompression() {
    this.Compression = null;
  }

  /** Returns true if field Compression is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression() {
    return this.Compression != null;
  }

  public void setCompressionIsSet(boolean value) {
    if (!value) {
      this.Compression = null;
    }
  }

  public byte[] getData() {
    setData(org.apache.thrift.TBaseHelper.rightSize(Data));
    return Data == null ? null : Data.array();
  }

  public ByteBuffer bufferForData() {
    return org.apache.thrift.TBaseHelper.copyBinary(Data);
  }

  public ThriftSResult setData(byte[] Data) {
    this.Data = Data == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(Data, Data.length));
    return this;
  }

  public ThriftSResult setData(ByteBuffer Data) {
    this.Data = org.apache.thrift.TBaseHelper.copyBinary(Data);
    return this;
  }

  public void unsetData() {
    this.Data = null;
  }

  /** Returns true if field Data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.Data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.Data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTENT_TYPE:
      if (value == null) {
        unsetContentType();
      } else {
        setContentType((String)value);
      }
      break;

    case COMPRESSION:
      if (value == null) {
        unsetCompression();
      } else {
        setCompression((ThriftSCompression)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTENT_TYPE:
      return getContentType();

    case COMPRESSION:
      return getCompression();

    case DATA:
      return getData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTENT_TYPE:
      return isSetContentType();
    case COMPRESSION:
      return isSetCompression();
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSResult)
      return this.equals((ThriftSResult)that);
    return false;
  }

  public boolean equals(ThriftSResult that) {
    if (that == null)
      return false;

    boolean this_present_ContentType = true && this.isSetContentType();
    boolean that_present_ContentType = true && that.isSetContentType();
    if (this_present_ContentType || that_present_ContentType) {
      if (!(this_present_ContentType && that_present_ContentType))
        return false;
      if (!this.ContentType.equals(that.ContentType))
        return false;
    }

    boolean this_present_Compression = true && this.isSetCompression();
    boolean that_present_Compression = true && that.isSetCompression();
    if (this_present_Compression || that_present_Compression) {
      if (!(this_present_Compression && that_present_Compression))
        return false;
      if (!this.Compression.equals(that.Compression))
        return false;
    }

    boolean this_present_Data = true && this.isSetData();
    boolean that_present_Data = true && that.isSetData();
    if (this_present_Data || that_present_Data) {
      if (!(this_present_Data && that_present_Data))
        return false;
      if (!this.Data.equals(that.Data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ContentType = true && (isSetContentType());
    list.add(present_ContentType);
    if (present_ContentType)
      list.add(ContentType);

    boolean present_Compression = true && (isSetCompression());
    list.add(present_Compression);
    if (present_Compression)
      list.add(Compression.getValue());

    boolean present_Data = true && (isSetData());
    list.add(present_Data);
    if (present_Data)
      list.add(Data);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftSResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContentType()).compareTo(other.isSetContentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ContentType, other.ContentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompression()).compareTo(other.isSetCompression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Compression, other.Compression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Data, other.Data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSResult(");
    boolean first = true;

    sb.append("ContentType:");
    if (this.ContentType == null) {
      sb.append("null");
    } else {
      sb.append(this.ContentType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Compression:");
    if (this.Compression == null) {
      sb.append("null");
    } else {
      sb.append(this.Compression);
    }
    first = false;
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("Data:");
      if (this.Data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.Data, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ContentType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ContentType' was not present! Struct: " + toString());
    }
    if (Compression == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Compression' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSResultStandardSchemeFactory implements SchemeFactory {
    public ThriftSResultStandardScheme getScheme() {
      return new ThriftSResultStandardScheme();
    }
  }

  private static class ThriftSResultStandardScheme extends StandardScheme<ThriftSResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ContentType = iprot.readString();
              struct.setContentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Compression = ThriftSCompression.findByValue(iprot.readI32());
              struct.setCompressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ContentType != null) {
        oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
        oprot.writeString(struct.ContentType);
        oprot.writeFieldEnd();
      }
      if (struct.Compression != null) {
        oprot.writeFieldBegin(COMPRESSION_FIELD_DESC);
        oprot.writeI32(struct.Compression.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.Data != null) {
        if (struct.isSetData()) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.Data);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSResultTupleSchemeFactory implements SchemeFactory {
    public ThriftSResultTupleScheme getScheme() {
      return new ThriftSResultTupleScheme();
    }
  }

  private static class ThriftSResultTupleScheme extends TupleScheme<ThriftSResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.ContentType);
      oprot.writeI32(struct.Compression.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetData()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetData()) {
        oprot.writeBinary(struct.Data);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ContentType = iprot.readString();
      struct.setContentTypeIsSet(true);
      struct.Compression = ThriftSCompression.findByValue(iprot.readI32());
      struct.setCompressionIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.Data = iprot.readBinary();
        struct.setDataIsSet(true);
      }
    }
  }

}

