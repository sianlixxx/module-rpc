/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.busap.rpc.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-27")
public class ThriftSHandler {

  public interface Iface {

    public ThriftSResponse Ping(ThriftSRequest request) throws BadRequestException, InternalServerException, org.apache.thrift.TException;

    public ThriftSResponse Hello(ThriftSRequest request) throws BadRequestException, InternalServerException, org.apache.thrift.TException;

    public ThriftSResponse Process(ThriftSRequest request) throws BadRequestException, InternalServerException, InvocationException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void Ping(ThriftSRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Hello(ThriftSRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Process(ThriftSRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ThriftSResponse Ping(ThriftSRequest request) throws BadRequestException, InternalServerException, org.apache.thrift.TException
    {
      send_Ping(request);
      return recv_Ping();
    }

    public void send_Ping(ThriftSRequest request) throws org.apache.thrift.TException
    {
      Ping_args args = new Ping_args();
      args.setRequest(request);
      sendBase("Ping", args);
    }

    public ThriftSResponse recv_Ping() throws BadRequestException, InternalServerException, org.apache.thrift.TException
    {
      Ping_result result = new Ping_result();
      receiveBase(result, "Ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.badRequestException != null) {
        throw result.badRequestException;
      }
      if (result.internalServerException != null) {
        throw result.internalServerException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Ping failed: unknown result");
    }

    public ThriftSResponse Hello(ThriftSRequest request) throws BadRequestException, InternalServerException, org.apache.thrift.TException
    {
      send_Hello(request);
      return recv_Hello();
    }

    public void send_Hello(ThriftSRequest request) throws org.apache.thrift.TException
    {
      Hello_args args = new Hello_args();
      args.setRequest(request);
      sendBase("Hello", args);
    }

    public ThriftSResponse recv_Hello() throws BadRequestException, InternalServerException, org.apache.thrift.TException
    {
      Hello_result result = new Hello_result();
      receiveBase(result, "Hello");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.badRequestException != null) {
        throw result.badRequestException;
      }
      if (result.internalServerException != null) {
        throw result.internalServerException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Hello failed: unknown result");
    }

    public ThriftSResponse Process(ThriftSRequest request) throws BadRequestException, InternalServerException, InvocationException, org.apache.thrift.TException
    {
      send_Process(request);
      return recv_Process();
    }

    public void send_Process(ThriftSRequest request) throws org.apache.thrift.TException
    {
      Process_args args = new Process_args();
      args.setRequest(request);
      sendBase("Process", args);
    }

    public ThriftSResponse recv_Process() throws BadRequestException, InternalServerException, InvocationException, org.apache.thrift.TException
    {
      Process_result result = new Process_result();
      receiveBase(result, "Process");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.badRequestException != null) {
        throw result.badRequestException;
      }
      if (result.internalServerException != null) {
        throw result.internalServerException;
      }
      if (result.invocationException != null) {
        throw result.invocationException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Process failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Ping(ThriftSRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Ping_call method_call = new Ping_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftSRequest request;
      public Ping_call(ThriftSRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Ping_args args = new Ping_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftSResponse getResult() throws BadRequestException, InternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Ping();
      }
    }

    public void Hello(ThriftSRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Hello_call method_call = new Hello_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Hello_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftSRequest request;
      public Hello_call(ThriftSRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Hello", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Hello_args args = new Hello_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftSResponse getResult() throws BadRequestException, InternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Hello();
      }
    }

    public void Process(ThriftSRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Process_call method_call = new Process_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Process_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftSRequest request;
      public Process_call(ThriftSRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Process", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Process_args args = new Process_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftSResponse getResult() throws BadRequestException, InternalServerException, InvocationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Process();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("Ping", new Ping());
      processMap.put("Hello", new Hello());
      processMap.put("Process", new Process());
      return processMap;
    }

    public static class Ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Ping_args> {
      public Ping() {
        super("Ping");
      }

      public Ping_args getEmptyArgsInstance() {
        return new Ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Ping_result getResult(I iface, Ping_args args) throws org.apache.thrift.TException {
        Ping_result result = new Ping_result();
        try {
          result.success = iface.Ping(args.request);
        } catch (BadRequestException badRequestException) {
          result.badRequestException = badRequestException;
        } catch (InternalServerException internalServerException) {
          result.internalServerException = internalServerException;
        }
        return result;
      }
    }

    public static class Hello<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Hello_args> {
      public Hello() {
        super("Hello");
      }

      public Hello_args getEmptyArgsInstance() {
        return new Hello_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Hello_result getResult(I iface, Hello_args args) throws org.apache.thrift.TException {
        Hello_result result = new Hello_result();
        try {
          result.success = iface.Hello(args.request);
        } catch (BadRequestException badRequestException) {
          result.badRequestException = badRequestException;
        } catch (InternalServerException internalServerException) {
          result.internalServerException = internalServerException;
        }
        return result;
      }
    }

    public static class Process<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Process_args> {
      public Process() {
        super("Process");
      }

      public Process_args getEmptyArgsInstance() {
        return new Process_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Process_result getResult(I iface, Process_args args) throws org.apache.thrift.TException {
        Process_result result = new Process_result();
        try {
          result.success = iface.Process(args.request);
        } catch (BadRequestException badRequestException) {
          result.badRequestException = badRequestException;
        } catch (InternalServerException internalServerException) {
          result.internalServerException = internalServerException;
        } catch (InvocationException invocationException) {
          result.invocationException = invocationException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("Ping", new Ping());
      processMap.put("Hello", new Hello());
      processMap.put("Process", new Process());
      return processMap;
    }

    public static class Ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Ping_args, ThriftSResponse> {
      public Ping() {
        super("Ping");
      }

      public Ping_args getEmptyArgsInstance() {
        return new Ping_args();
      }

      public AsyncMethodCallback<ThriftSResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftSResponse>() {
          public void onComplete(ThriftSResponse o) {
            Ping_result result = new Ping_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Ping_result result = new Ping_result();
            if (e instanceof BadRequestException) {
                        result.badRequestException = (BadRequestException) e;
                        result.setBadRequestExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InternalServerException) {
                        result.internalServerException = (InternalServerException) e;
                        result.setInternalServerExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Ping_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftSResponse> resultHandler) throws TException {
        iface.Ping(args.request,resultHandler);
      }
    }

    public static class Hello<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Hello_args, ThriftSResponse> {
      public Hello() {
        super("Hello");
      }

      public Hello_args getEmptyArgsInstance() {
        return new Hello_args();
      }

      public AsyncMethodCallback<ThriftSResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftSResponse>() {
          public void onComplete(ThriftSResponse o) {
            Hello_result result = new Hello_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Hello_result result = new Hello_result();
            if (e instanceof BadRequestException) {
                        result.badRequestException = (BadRequestException) e;
                        result.setBadRequestExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InternalServerException) {
                        result.internalServerException = (InternalServerException) e;
                        result.setInternalServerExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Hello_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftSResponse> resultHandler) throws TException {
        iface.Hello(args.request,resultHandler);
      }
    }

    public static class Process<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Process_args, ThriftSResponse> {
      public Process() {
        super("Process");
      }

      public Process_args getEmptyArgsInstance() {
        return new Process_args();
      }

      public AsyncMethodCallback<ThriftSResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftSResponse>() {
          public void onComplete(ThriftSResponse o) {
            Process_result result = new Process_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Process_result result = new Process_result();
            if (e instanceof BadRequestException) {
                        result.badRequestException = (BadRequestException) e;
                        result.setBadRequestExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InternalServerException) {
                        result.internalServerException = (InternalServerException) e;
                        result.setInternalServerExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof InvocationException) {
                        result.invocationException = (InvocationException) e;
                        result.setInvocationExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Process_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftSResponse> resultHandler) throws TException {
        iface.Process(args.request,resultHandler);
      }
    }

  }

  public static class Ping_args implements org.apache.thrift.TBase<Ping_args, Ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Ping_argsTupleSchemeFactory());
    }

    public ThriftSRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_args.class, metaDataMap);
    }

    public Ping_args() {
    }

    public Ping_args(
      ThriftSRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ping_args(Ping_args other) {
      if (other.isSetRequest()) {
        this.request = new ThriftSRequest(other.request);
      }
    }

    public Ping_args deepCopy() {
      return new Ping_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public ThriftSRequest getRequest() {
      return this.request;
    }

    public Ping_args setRequest(ThriftSRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ThriftSRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Ping_args)
        return this.equals((Ping_args)that);
      return false;
    }

    public boolean equals(Ping_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(Ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Ping_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Ping_argsStandardSchemeFactory implements SchemeFactory {
      public Ping_argsStandardScheme getScheme() {
        return new Ping_argsStandardScheme();
      }
    }

    private static class Ping_argsStandardScheme extends StandardScheme<Ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new ThriftSRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Ping_argsTupleSchemeFactory implements SchemeFactory {
      public Ping_argsTupleScheme getScheme() {
        return new Ping_argsTupleScheme();
      }
    }

    private static class Ping_argsTupleScheme extends TupleScheme<Ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new ThriftSRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class Ping_result implements org.apache.thrift.TBase<Ping_result, Ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BAD_REQUEST_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("badRequestException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServerException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Ping_resultTupleSchemeFactory());
    }

    public ThriftSResponse success; // required
    public BadRequestException badRequestException; // required
    public InternalServerException internalServerException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BAD_REQUEST_EXCEPTION((short)1, "badRequestException"),
      INTERNAL_SERVER_EXCEPTION((short)2, "internalServerException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BAD_REQUEST_EXCEPTION
            return BAD_REQUEST_EXCEPTION;
          case 2: // INTERNAL_SERVER_EXCEPTION
            return INTERNAL_SERVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSResponse.class)));
      tmpMap.put(_Fields.BAD_REQUEST_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("badRequestException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INTERNAL_SERVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServerException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_result.class, metaDataMap);
    }

    public Ping_result() {
    }

    public Ping_result(
      ThriftSResponse success,
      BadRequestException badRequestException,
      InternalServerException internalServerException)
    {
      this();
      this.success = success;
      this.badRequestException = badRequestException;
      this.internalServerException = internalServerException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ping_result(Ping_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftSResponse(other.success);
      }
      if (other.isSetBadRequestException()) {
        this.badRequestException = new BadRequestException(other.badRequestException);
      }
      if (other.isSetInternalServerException()) {
        this.internalServerException = new InternalServerException(other.internalServerException);
      }
    }

    public Ping_result deepCopy() {
      return new Ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.badRequestException = null;
      this.internalServerException = null;
    }

    public ThriftSResponse getSuccess() {
      return this.success;
    }

    public Ping_result setSuccess(ThriftSResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadRequestException getBadRequestException() {
      return this.badRequestException;
    }

    public Ping_result setBadRequestException(BadRequestException badRequestException) {
      this.badRequestException = badRequestException;
      return this;
    }

    public void unsetBadRequestException() {
      this.badRequestException = null;
    }

    /** Returns true if field badRequestException is set (has been assigned a value) and false otherwise */
    public boolean isSetBadRequestException() {
      return this.badRequestException != null;
    }

    public void setBadRequestExceptionIsSet(boolean value) {
      if (!value) {
        this.badRequestException = null;
      }
    }

    public InternalServerException getInternalServerException() {
      return this.internalServerException;
    }

    public Ping_result setInternalServerException(InternalServerException internalServerException) {
      this.internalServerException = internalServerException;
      return this;
    }

    public void unsetInternalServerException() {
      this.internalServerException = null;
    }

    /** Returns true if field internalServerException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServerException() {
      return this.internalServerException != null;
    }

    public void setInternalServerExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServerException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftSResponse)value);
        }
        break;

      case BAD_REQUEST_EXCEPTION:
        if (value == null) {
          unsetBadRequestException();
        } else {
          setBadRequestException((BadRequestException)value);
        }
        break;

      case INTERNAL_SERVER_EXCEPTION:
        if (value == null) {
          unsetInternalServerException();
        } else {
          setInternalServerException((InternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BAD_REQUEST_EXCEPTION:
        return getBadRequestException();

      case INTERNAL_SERVER_EXCEPTION:
        return getInternalServerException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BAD_REQUEST_EXCEPTION:
        return isSetBadRequestException();
      case INTERNAL_SERVER_EXCEPTION:
        return isSetInternalServerException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Ping_result)
        return this.equals((Ping_result)that);
      return false;
    }

    public boolean equals(Ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_badRequestException = true && this.isSetBadRequestException();
      boolean that_present_badRequestException = true && that.isSetBadRequestException();
      if (this_present_badRequestException || that_present_badRequestException) {
        if (!(this_present_badRequestException && that_present_badRequestException))
          return false;
        if (!this.badRequestException.equals(that.badRequestException))
          return false;
      }

      boolean this_present_internalServerException = true && this.isSetInternalServerException();
      boolean that_present_internalServerException = true && that.isSetInternalServerException();
      if (this_present_internalServerException || that_present_internalServerException) {
        if (!(this_present_internalServerException && that_present_internalServerException))
          return false;
        if (!this.internalServerException.equals(that.internalServerException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_badRequestException = true && (isSetBadRequestException());
      list.add(present_badRequestException);
      if (present_badRequestException)
        list.add(badRequestException);

      boolean present_internalServerException = true && (isSetInternalServerException());
      list.add(present_internalServerException);
      if (present_internalServerException)
        list.add(internalServerException);

      return list.hashCode();
    }

    @Override
    public int compareTo(Ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBadRequestException()).compareTo(other.isSetBadRequestException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBadRequestException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badRequestException, other.badRequestException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalServerException()).compareTo(other.isSetInternalServerException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServerException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServerException, other.internalServerException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("badRequestException:");
      if (this.badRequestException == null) {
        sb.append("null");
      } else {
        sb.append(this.badRequestException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServerException:");
      if (this.internalServerException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServerException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Ping_resultStandardSchemeFactory implements SchemeFactory {
      public Ping_resultStandardScheme getScheme() {
        return new Ping_resultStandardScheme();
      }
    }

    private static class Ping_resultStandardScheme extends StandardScheme<Ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftSResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BAD_REQUEST_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.badRequestException = new BadRequestException();
                struct.badRequestException.read(iprot);
                struct.setBadRequestExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_SERVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServerException = new InternalServerException();
                struct.internalServerException.read(iprot);
                struct.setInternalServerExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.badRequestException != null) {
          oprot.writeFieldBegin(BAD_REQUEST_EXCEPTION_FIELD_DESC);
          struct.badRequestException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.internalServerException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVER_EXCEPTION_FIELD_DESC);
          struct.internalServerException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Ping_resultTupleSchemeFactory implements SchemeFactory {
      public Ping_resultTupleScheme getScheme() {
        return new Ping_resultTupleScheme();
      }
    }

    private static class Ping_resultTupleScheme extends TupleScheme<Ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBadRequestException()) {
          optionals.set(1);
        }
        if (struct.isSetInternalServerException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBadRequestException()) {
          struct.badRequestException.write(oprot);
        }
        if (struct.isSetInternalServerException()) {
          struct.internalServerException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ThriftSResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.badRequestException = new BadRequestException();
          struct.badRequestException.read(iprot);
          struct.setBadRequestExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.internalServerException = new InternalServerException();
          struct.internalServerException.read(iprot);
          struct.setInternalServerExceptionIsSet(true);
        }
      }
    }

  }

  public static class Hello_args implements org.apache.thrift.TBase<Hello_args, Hello_args._Fields>, java.io.Serializable, Cloneable, Comparable<Hello_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Hello_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Hello_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Hello_argsTupleSchemeFactory());
    }

    public ThriftSRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Hello_args.class, metaDataMap);
    }

    public Hello_args() {
    }

    public Hello_args(
      ThriftSRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Hello_args(Hello_args other) {
      if (other.isSetRequest()) {
        this.request = new ThriftSRequest(other.request);
      }
    }

    public Hello_args deepCopy() {
      return new Hello_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public ThriftSRequest getRequest() {
      return this.request;
    }

    public Hello_args setRequest(ThriftSRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ThriftSRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Hello_args)
        return this.equals((Hello_args)that);
      return false;
    }

    public boolean equals(Hello_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(Hello_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Hello_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Hello_argsStandardSchemeFactory implements SchemeFactory {
      public Hello_argsStandardScheme getScheme() {
        return new Hello_argsStandardScheme();
      }
    }

    private static class Hello_argsStandardScheme extends StandardScheme<Hello_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Hello_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new ThriftSRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Hello_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Hello_argsTupleSchemeFactory implements SchemeFactory {
      public Hello_argsTupleScheme getScheme() {
        return new Hello_argsTupleScheme();
      }
    }

    private static class Hello_argsTupleScheme extends TupleScheme<Hello_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Hello_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Hello_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new ThriftSRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class Hello_result implements org.apache.thrift.TBase<Hello_result, Hello_result._Fields>, java.io.Serializable, Cloneable, Comparable<Hello_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Hello_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BAD_REQUEST_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("badRequestException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServerException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Hello_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Hello_resultTupleSchemeFactory());
    }

    public ThriftSResponse success; // required
    public BadRequestException badRequestException; // required
    public InternalServerException internalServerException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BAD_REQUEST_EXCEPTION((short)1, "badRequestException"),
      INTERNAL_SERVER_EXCEPTION((short)2, "internalServerException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BAD_REQUEST_EXCEPTION
            return BAD_REQUEST_EXCEPTION;
          case 2: // INTERNAL_SERVER_EXCEPTION
            return INTERNAL_SERVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSResponse.class)));
      tmpMap.put(_Fields.BAD_REQUEST_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("badRequestException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INTERNAL_SERVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServerException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Hello_result.class, metaDataMap);
    }

    public Hello_result() {
    }

    public Hello_result(
      ThriftSResponse success,
      BadRequestException badRequestException,
      InternalServerException internalServerException)
    {
      this();
      this.success = success;
      this.badRequestException = badRequestException;
      this.internalServerException = internalServerException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Hello_result(Hello_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftSResponse(other.success);
      }
      if (other.isSetBadRequestException()) {
        this.badRequestException = new BadRequestException(other.badRequestException);
      }
      if (other.isSetInternalServerException()) {
        this.internalServerException = new InternalServerException(other.internalServerException);
      }
    }

    public Hello_result deepCopy() {
      return new Hello_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.badRequestException = null;
      this.internalServerException = null;
    }

    public ThriftSResponse getSuccess() {
      return this.success;
    }

    public Hello_result setSuccess(ThriftSResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadRequestException getBadRequestException() {
      return this.badRequestException;
    }

    public Hello_result setBadRequestException(BadRequestException badRequestException) {
      this.badRequestException = badRequestException;
      return this;
    }

    public void unsetBadRequestException() {
      this.badRequestException = null;
    }

    /** Returns true if field badRequestException is set (has been assigned a value) and false otherwise */
    public boolean isSetBadRequestException() {
      return this.badRequestException != null;
    }

    public void setBadRequestExceptionIsSet(boolean value) {
      if (!value) {
        this.badRequestException = null;
      }
    }

    public InternalServerException getInternalServerException() {
      return this.internalServerException;
    }

    public Hello_result setInternalServerException(InternalServerException internalServerException) {
      this.internalServerException = internalServerException;
      return this;
    }

    public void unsetInternalServerException() {
      this.internalServerException = null;
    }

    /** Returns true if field internalServerException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServerException() {
      return this.internalServerException != null;
    }

    public void setInternalServerExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServerException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftSResponse)value);
        }
        break;

      case BAD_REQUEST_EXCEPTION:
        if (value == null) {
          unsetBadRequestException();
        } else {
          setBadRequestException((BadRequestException)value);
        }
        break;

      case INTERNAL_SERVER_EXCEPTION:
        if (value == null) {
          unsetInternalServerException();
        } else {
          setInternalServerException((InternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BAD_REQUEST_EXCEPTION:
        return getBadRequestException();

      case INTERNAL_SERVER_EXCEPTION:
        return getInternalServerException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BAD_REQUEST_EXCEPTION:
        return isSetBadRequestException();
      case INTERNAL_SERVER_EXCEPTION:
        return isSetInternalServerException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Hello_result)
        return this.equals((Hello_result)that);
      return false;
    }

    public boolean equals(Hello_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_badRequestException = true && this.isSetBadRequestException();
      boolean that_present_badRequestException = true && that.isSetBadRequestException();
      if (this_present_badRequestException || that_present_badRequestException) {
        if (!(this_present_badRequestException && that_present_badRequestException))
          return false;
        if (!this.badRequestException.equals(that.badRequestException))
          return false;
      }

      boolean this_present_internalServerException = true && this.isSetInternalServerException();
      boolean that_present_internalServerException = true && that.isSetInternalServerException();
      if (this_present_internalServerException || that_present_internalServerException) {
        if (!(this_present_internalServerException && that_present_internalServerException))
          return false;
        if (!this.internalServerException.equals(that.internalServerException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_badRequestException = true && (isSetBadRequestException());
      list.add(present_badRequestException);
      if (present_badRequestException)
        list.add(badRequestException);

      boolean present_internalServerException = true && (isSetInternalServerException());
      list.add(present_internalServerException);
      if (present_internalServerException)
        list.add(internalServerException);

      return list.hashCode();
    }

    @Override
    public int compareTo(Hello_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBadRequestException()).compareTo(other.isSetBadRequestException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBadRequestException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badRequestException, other.badRequestException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalServerException()).compareTo(other.isSetInternalServerException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServerException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServerException, other.internalServerException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Hello_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("badRequestException:");
      if (this.badRequestException == null) {
        sb.append("null");
      } else {
        sb.append(this.badRequestException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServerException:");
      if (this.internalServerException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServerException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Hello_resultStandardSchemeFactory implements SchemeFactory {
      public Hello_resultStandardScheme getScheme() {
        return new Hello_resultStandardScheme();
      }
    }

    private static class Hello_resultStandardScheme extends StandardScheme<Hello_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Hello_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftSResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BAD_REQUEST_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.badRequestException = new BadRequestException();
                struct.badRequestException.read(iprot);
                struct.setBadRequestExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_SERVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServerException = new InternalServerException();
                struct.internalServerException.read(iprot);
                struct.setInternalServerExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Hello_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.badRequestException != null) {
          oprot.writeFieldBegin(BAD_REQUEST_EXCEPTION_FIELD_DESC);
          struct.badRequestException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.internalServerException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVER_EXCEPTION_FIELD_DESC);
          struct.internalServerException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Hello_resultTupleSchemeFactory implements SchemeFactory {
      public Hello_resultTupleScheme getScheme() {
        return new Hello_resultTupleScheme();
      }
    }

    private static class Hello_resultTupleScheme extends TupleScheme<Hello_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Hello_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBadRequestException()) {
          optionals.set(1);
        }
        if (struct.isSetInternalServerException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBadRequestException()) {
          struct.badRequestException.write(oprot);
        }
        if (struct.isSetInternalServerException()) {
          struct.internalServerException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Hello_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ThriftSResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.badRequestException = new BadRequestException();
          struct.badRequestException.read(iprot);
          struct.setBadRequestExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.internalServerException = new InternalServerException();
          struct.internalServerException.read(iprot);
          struct.setInternalServerExceptionIsSet(true);
        }
      }
    }

  }

  public static class Process_args implements org.apache.thrift.TBase<Process_args, Process_args._Fields>, java.io.Serializable, Cloneable, Comparable<Process_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Process_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Process_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Process_argsTupleSchemeFactory());
    }

    public ThriftSRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Process_args.class, metaDataMap);
    }

    public Process_args() {
    }

    public Process_args(
      ThriftSRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Process_args(Process_args other) {
      if (other.isSetRequest()) {
        this.request = new ThriftSRequest(other.request);
      }
    }

    public Process_args deepCopy() {
      return new Process_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    public ThriftSRequest getRequest() {
      return this.request;
    }

    public Process_args setRequest(ThriftSRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ThriftSRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Process_args)
        return this.equals((Process_args)that);
      return false;
    }

    public boolean equals(Process_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(Process_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Process_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Process_argsStandardSchemeFactory implements SchemeFactory {
      public Process_argsStandardScheme getScheme() {
        return new Process_argsStandardScheme();
      }
    }

    private static class Process_argsStandardScheme extends StandardScheme<Process_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Process_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new ThriftSRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Process_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Process_argsTupleSchemeFactory implements SchemeFactory {
      public Process_argsTupleScheme getScheme() {
        return new Process_argsTupleScheme();
      }
    }

    private static class Process_argsTupleScheme extends TupleScheme<Process_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Process_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Process_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new ThriftSRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class Process_result implements org.apache.thrift.TBase<Process_result, Process_result._Fields>, java.io.Serializable, Cloneable, Comparable<Process_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Process_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BAD_REQUEST_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("badRequestException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField INTERNAL_SERVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("internalServerException", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField INVOCATION_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("invocationException", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Process_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Process_resultTupleSchemeFactory());
    }

    public ThriftSResponse success; // required
    public BadRequestException badRequestException; // required
    public InternalServerException internalServerException; // required
    public InvocationException invocationException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BAD_REQUEST_EXCEPTION((short)1, "badRequestException"),
      INTERNAL_SERVER_EXCEPTION((short)2, "internalServerException"),
      INVOCATION_EXCEPTION((short)3, "invocationException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BAD_REQUEST_EXCEPTION
            return BAD_REQUEST_EXCEPTION;
          case 2: // INTERNAL_SERVER_EXCEPTION
            return INTERNAL_SERVER_EXCEPTION;
          case 3: // INVOCATION_EXCEPTION
            return INVOCATION_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSResponse.class)));
      tmpMap.put(_Fields.BAD_REQUEST_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("badRequestException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INTERNAL_SERVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("internalServerException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.INVOCATION_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("invocationException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Process_result.class, metaDataMap);
    }

    public Process_result() {
    }

    public Process_result(
      ThriftSResponse success,
      BadRequestException badRequestException,
      InternalServerException internalServerException,
      InvocationException invocationException)
    {
      this();
      this.success = success;
      this.badRequestException = badRequestException;
      this.internalServerException = internalServerException;
      this.invocationException = invocationException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Process_result(Process_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftSResponse(other.success);
      }
      if (other.isSetBadRequestException()) {
        this.badRequestException = new BadRequestException(other.badRequestException);
      }
      if (other.isSetInternalServerException()) {
        this.internalServerException = new InternalServerException(other.internalServerException);
      }
      if (other.isSetInvocationException()) {
        this.invocationException = new InvocationException(other.invocationException);
      }
    }

    public Process_result deepCopy() {
      return new Process_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.badRequestException = null;
      this.internalServerException = null;
      this.invocationException = null;
    }

    public ThriftSResponse getSuccess() {
      return this.success;
    }

    public Process_result setSuccess(ThriftSResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BadRequestException getBadRequestException() {
      return this.badRequestException;
    }

    public Process_result setBadRequestException(BadRequestException badRequestException) {
      this.badRequestException = badRequestException;
      return this;
    }

    public void unsetBadRequestException() {
      this.badRequestException = null;
    }

    /** Returns true if field badRequestException is set (has been assigned a value) and false otherwise */
    public boolean isSetBadRequestException() {
      return this.badRequestException != null;
    }

    public void setBadRequestExceptionIsSet(boolean value) {
      if (!value) {
        this.badRequestException = null;
      }
    }

    public InternalServerException getInternalServerException() {
      return this.internalServerException;
    }

    public Process_result setInternalServerException(InternalServerException internalServerException) {
      this.internalServerException = internalServerException;
      return this;
    }

    public void unsetInternalServerException() {
      this.internalServerException = null;
    }

    /** Returns true if field internalServerException is set (has been assigned a value) and false otherwise */
    public boolean isSetInternalServerException() {
      return this.internalServerException != null;
    }

    public void setInternalServerExceptionIsSet(boolean value) {
      if (!value) {
        this.internalServerException = null;
      }
    }

    public InvocationException getInvocationException() {
      return this.invocationException;
    }

    public Process_result setInvocationException(InvocationException invocationException) {
      this.invocationException = invocationException;
      return this;
    }

    public void unsetInvocationException() {
      this.invocationException = null;
    }

    /** Returns true if field invocationException is set (has been assigned a value) and false otherwise */
    public boolean isSetInvocationException() {
      return this.invocationException != null;
    }

    public void setInvocationExceptionIsSet(boolean value) {
      if (!value) {
        this.invocationException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftSResponse)value);
        }
        break;

      case BAD_REQUEST_EXCEPTION:
        if (value == null) {
          unsetBadRequestException();
        } else {
          setBadRequestException((BadRequestException)value);
        }
        break;

      case INTERNAL_SERVER_EXCEPTION:
        if (value == null) {
          unsetInternalServerException();
        } else {
          setInternalServerException((InternalServerException)value);
        }
        break;

      case INVOCATION_EXCEPTION:
        if (value == null) {
          unsetInvocationException();
        } else {
          setInvocationException((InvocationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BAD_REQUEST_EXCEPTION:
        return getBadRequestException();

      case INTERNAL_SERVER_EXCEPTION:
        return getInternalServerException();

      case INVOCATION_EXCEPTION:
        return getInvocationException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BAD_REQUEST_EXCEPTION:
        return isSetBadRequestException();
      case INTERNAL_SERVER_EXCEPTION:
        return isSetInternalServerException();
      case INVOCATION_EXCEPTION:
        return isSetInvocationException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Process_result)
        return this.equals((Process_result)that);
      return false;
    }

    public boolean equals(Process_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_badRequestException = true && this.isSetBadRequestException();
      boolean that_present_badRequestException = true && that.isSetBadRequestException();
      if (this_present_badRequestException || that_present_badRequestException) {
        if (!(this_present_badRequestException && that_present_badRequestException))
          return false;
        if (!this.badRequestException.equals(that.badRequestException))
          return false;
      }

      boolean this_present_internalServerException = true && this.isSetInternalServerException();
      boolean that_present_internalServerException = true && that.isSetInternalServerException();
      if (this_present_internalServerException || that_present_internalServerException) {
        if (!(this_present_internalServerException && that_present_internalServerException))
          return false;
        if (!this.internalServerException.equals(that.internalServerException))
          return false;
      }

      boolean this_present_invocationException = true && this.isSetInvocationException();
      boolean that_present_invocationException = true && that.isSetInvocationException();
      if (this_present_invocationException || that_present_invocationException) {
        if (!(this_present_invocationException && that_present_invocationException))
          return false;
        if (!this.invocationException.equals(that.invocationException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_badRequestException = true && (isSetBadRequestException());
      list.add(present_badRequestException);
      if (present_badRequestException)
        list.add(badRequestException);

      boolean present_internalServerException = true && (isSetInternalServerException());
      list.add(present_internalServerException);
      if (present_internalServerException)
        list.add(internalServerException);

      boolean present_invocationException = true && (isSetInvocationException());
      list.add(present_invocationException);
      if (present_invocationException)
        list.add(invocationException);

      return list.hashCode();
    }

    @Override
    public int compareTo(Process_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBadRequestException()).compareTo(other.isSetBadRequestException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBadRequestException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badRequestException, other.badRequestException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInternalServerException()).compareTo(other.isSetInternalServerException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInternalServerException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.internalServerException, other.internalServerException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInvocationException()).compareTo(other.isSetInvocationException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvocationException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invocationException, other.invocationException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Process_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("badRequestException:");
      if (this.badRequestException == null) {
        sb.append("null");
      } else {
        sb.append(this.badRequestException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("internalServerException:");
      if (this.internalServerException == null) {
        sb.append("null");
      } else {
        sb.append(this.internalServerException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("invocationException:");
      if (this.invocationException == null) {
        sb.append("null");
      } else {
        sb.append(this.invocationException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Process_resultStandardSchemeFactory implements SchemeFactory {
      public Process_resultStandardScheme getScheme() {
        return new Process_resultStandardScheme();
      }
    }

    private static class Process_resultStandardScheme extends StandardScheme<Process_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Process_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftSResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BAD_REQUEST_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.badRequestException = new BadRequestException();
                struct.badRequestException.read(iprot);
                struct.setBadRequestExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERNAL_SERVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.internalServerException = new InternalServerException();
                struct.internalServerException.read(iprot);
                struct.setInternalServerExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INVOCATION_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invocationException = new InvocationException();
                struct.invocationException.read(iprot);
                struct.setInvocationExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Process_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.badRequestException != null) {
          oprot.writeFieldBegin(BAD_REQUEST_EXCEPTION_FIELD_DESC);
          struct.badRequestException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.internalServerException != null) {
          oprot.writeFieldBegin(INTERNAL_SERVER_EXCEPTION_FIELD_DESC);
          struct.internalServerException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.invocationException != null) {
          oprot.writeFieldBegin(INVOCATION_EXCEPTION_FIELD_DESC);
          struct.invocationException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Process_resultTupleSchemeFactory implements SchemeFactory {
      public Process_resultTupleScheme getScheme() {
        return new Process_resultTupleScheme();
      }
    }

    private static class Process_resultTupleScheme extends TupleScheme<Process_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Process_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBadRequestException()) {
          optionals.set(1);
        }
        if (struct.isSetInternalServerException()) {
          optionals.set(2);
        }
        if (struct.isSetInvocationException()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBadRequestException()) {
          struct.badRequestException.write(oprot);
        }
        if (struct.isSetInternalServerException()) {
          struct.internalServerException.write(oprot);
        }
        if (struct.isSetInvocationException()) {
          struct.invocationException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Process_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new ThriftSResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.badRequestException = new BadRequestException();
          struct.badRequestException.read(iprot);
          struct.setBadRequestExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.internalServerException = new InternalServerException();
          struct.internalServerException.read(iprot);
          struct.setInternalServerExceptionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.invocationException = new InvocationException();
          struct.invocationException.read(iprot);
          struct.setInvocationExceptionIsSet(true);
        }
      }
    }

  }

}
