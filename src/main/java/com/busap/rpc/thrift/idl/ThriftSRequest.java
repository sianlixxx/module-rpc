/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.busap.rpc.thrift.idl;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-27")
public class ThriftSRequest implements org.apache.thrift.TBase<ThriftSRequest, ThriftSRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftSRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSRequest");

  private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("Headers", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ServiceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("MethodName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("Parameters", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSRequestTupleSchemeFactory());
  }

  public Map<String,String> Headers; // required
  public String ServiceName; // optional
  public String MethodName; // optional
  public List<ThriftSParameter> Parameters; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEADERS((short)1, "Headers"),
    SERVICE_NAME((short)2, "ServiceName"),
    METHOD_NAME((short)3, "MethodName"),
    PARAMETERS((short)4, "Parameters");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEADERS
          return HEADERS;
        case 2: // SERVICE_NAME
          return SERVICE_NAME;
        case 3: // METHOD_NAME
          return METHOD_NAME;
        case 4: // PARAMETERS
          return PARAMETERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SERVICE_NAME,_Fields.METHOD_NAME,_Fields.PARAMETERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("Headers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ServiceName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("MethodName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("Parameters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSParameter.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSRequest.class, metaDataMap);
  }

  public ThriftSRequest() {
  }

  public ThriftSRequest(
    Map<String,String> Headers)
  {
    this();
    this.Headers = Headers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSRequest(ThriftSRequest other) {
    if (other.isSetHeaders()) {
      Map<String,String> __this__Headers = new HashMap<String,String>(other.Headers);
      this.Headers = __this__Headers;
    }
    if (other.isSetServiceName()) {
      this.ServiceName = other.ServiceName;
    }
    if (other.isSetMethodName()) {
      this.MethodName = other.MethodName;
    }
    if (other.isSetParameters()) {
      List<ThriftSParameter> __this__Parameters = new ArrayList<ThriftSParameter>(other.Parameters.size());
      for (ThriftSParameter other_element : other.Parameters) {
        __this__Parameters.add(new ThriftSParameter(other_element));
      }
      this.Parameters = __this__Parameters;
    }
  }

  public ThriftSRequest deepCopy() {
    return new ThriftSRequest(this);
  }

  @Override
  public void clear() {
    this.Headers = null;
    this.ServiceName = null;
    this.MethodName = null;
    this.Parameters = null;
  }

  public int getHeadersSize() {
    return (this.Headers == null) ? 0 : this.Headers.size();
  }

  public void putToHeaders(String key, String val) {
    if (this.Headers == null) {
      this.Headers = new HashMap<String,String>();
    }
    this.Headers.put(key, val);
  }

  public Map<String,String> getHeaders() {
    return this.Headers;
  }

  public ThriftSRequest setHeaders(Map<String,String> Headers) {
    this.Headers = Headers;
    return this;
  }

  public void unsetHeaders() {
    this.Headers = null;
  }

  /** Returns true if field Headers is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaders() {
    return this.Headers != null;
  }

  public void setHeadersIsSet(boolean value) {
    if (!value) {
      this.Headers = null;
    }
  }

  public String getServiceName() {
    return this.ServiceName;
  }

  public ThriftSRequest setServiceName(String ServiceName) {
    this.ServiceName = ServiceName;
    return this;
  }

  public void unsetServiceName() {
    this.ServiceName = null;
  }

  /** Returns true if field ServiceName is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceName() {
    return this.ServiceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.ServiceName = null;
    }
  }

  public String getMethodName() {
    return this.MethodName;
  }

  public ThriftSRequest setMethodName(String MethodName) {
    this.MethodName = MethodName;
    return this;
  }

  public void unsetMethodName() {
    this.MethodName = null;
  }

  /** Returns true if field MethodName is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodName() {
    return this.MethodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.MethodName = null;
    }
  }

  public int getParametersSize() {
    return (this.Parameters == null) ? 0 : this.Parameters.size();
  }

  public java.util.Iterator<ThriftSParameter> getParametersIterator() {
    return (this.Parameters == null) ? null : this.Parameters.iterator();
  }

  public void addToParameters(ThriftSParameter elem) {
    if (this.Parameters == null) {
      this.Parameters = new ArrayList<ThriftSParameter>();
    }
    this.Parameters.add(elem);
  }

  public List<ThriftSParameter> getParameters() {
    return this.Parameters;
  }

  public ThriftSRequest setParameters(List<ThriftSParameter> Parameters) {
    this.Parameters = Parameters;
    return this;
  }

  public void unsetParameters() {
    this.Parameters = null;
  }

  /** Returns true if field Parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.Parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.Parameters = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEADERS:
      if (value == null) {
        unsetHeaders();
      } else {
        setHeaders((Map<String,String>)value);
      }
      break;

    case SERVICE_NAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case METHOD_NAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((String)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((List<ThriftSParameter>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEADERS:
      return getHeaders();

    case SERVICE_NAME:
      return getServiceName();

    case METHOD_NAME:
      return getMethodName();

    case PARAMETERS:
      return getParameters();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEADERS:
      return isSetHeaders();
    case SERVICE_NAME:
      return isSetServiceName();
    case METHOD_NAME:
      return isSetMethodName();
    case PARAMETERS:
      return isSetParameters();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSRequest)
      return this.equals((ThriftSRequest)that);
    return false;
  }

  public boolean equals(ThriftSRequest that) {
    if (that == null)
      return false;

    boolean this_present_Headers = true && this.isSetHeaders();
    boolean that_present_Headers = true && that.isSetHeaders();
    if (this_present_Headers || that_present_Headers) {
      if (!(this_present_Headers && that_present_Headers))
        return false;
      if (!this.Headers.equals(that.Headers))
        return false;
    }

    boolean this_present_ServiceName = true && this.isSetServiceName();
    boolean that_present_ServiceName = true && that.isSetServiceName();
    if (this_present_ServiceName || that_present_ServiceName) {
      if (!(this_present_ServiceName && that_present_ServiceName))
        return false;
      if (!this.ServiceName.equals(that.ServiceName))
        return false;
    }

    boolean this_present_MethodName = true && this.isSetMethodName();
    boolean that_present_MethodName = true && that.isSetMethodName();
    if (this_present_MethodName || that_present_MethodName) {
      if (!(this_present_MethodName && that_present_MethodName))
        return false;
      if (!this.MethodName.equals(that.MethodName))
        return false;
    }

    boolean this_present_Parameters = true && this.isSetParameters();
    boolean that_present_Parameters = true && that.isSetParameters();
    if (this_present_Parameters || that_present_Parameters) {
      if (!(this_present_Parameters && that_present_Parameters))
        return false;
      if (!this.Parameters.equals(that.Parameters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Headers = true && (isSetHeaders());
    list.add(present_Headers);
    if (present_Headers)
      list.add(Headers);

    boolean present_ServiceName = true && (isSetServiceName());
    list.add(present_ServiceName);
    if (present_ServiceName)
      list.add(ServiceName);

    boolean present_MethodName = true && (isSetMethodName());
    list.add(present_MethodName);
    if (present_MethodName)
      list.add(MethodName);

    boolean present_Parameters = true && (isSetParameters());
    list.add(present_Parameters);
    if (present_Parameters)
      list.add(Parameters);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftSRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Headers, other.Headers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ServiceName, other.ServiceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethodName()).compareTo(other.isSetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MethodName, other.MethodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Parameters, other.Parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSRequest(");
    boolean first = true;

    sb.append("Headers:");
    if (this.Headers == null) {
      sb.append("null");
    } else {
      sb.append(this.Headers);
    }
    first = false;
    if (isSetServiceName()) {
      if (!first) sb.append(", ");
      sb.append("ServiceName:");
      if (this.ServiceName == null) {
        sb.append("null");
      } else {
        sb.append(this.ServiceName);
      }
      first = false;
    }
    if (isSetMethodName()) {
      if (!first) sb.append(", ");
      sb.append("MethodName:");
      if (this.MethodName == null) {
        sb.append("null");
      } else {
        sb.append(this.MethodName);
      }
      first = false;
    }
    if (isSetParameters()) {
      if (!first) sb.append(", ");
      sb.append("Parameters:");
      if (this.Parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.Parameters);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (Headers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Headers' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSRequestStandardSchemeFactory implements SchemeFactory {
    public ThriftSRequestStandardScheme getScheme() {
      return new ThriftSRequestStandardScheme();
    }
  }

  private static class ThriftSRequestStandardScheme extends StandardScheme<ThriftSRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.Headers = new HashMap<String,String>(2*_map0.size);
                String _key1;
                String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.Headers.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setHeadersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ServiceName = iprot.readString();
              struct.setServiceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.MethodName = iprot.readString();
              struct.setMethodNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.Parameters = new ArrayList<ThriftSParameter>(_list4.size);
                ThriftSParameter _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = new ThriftSParameter();
                  _elem5.read(iprot);
                  struct.Parameters.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Headers != null) {
        oprot.writeFieldBegin(HEADERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.Headers.size()));
          for (Map.Entry<String, String> _iter7 : struct.Headers.entrySet())
          {
            oprot.writeString(_iter7.getKey());
            oprot.writeString(_iter7.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ServiceName != null) {
        if (struct.isSetServiceName()) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.ServiceName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.MethodName != null) {
        if (struct.isSetMethodName()) {
          oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
          oprot.writeString(struct.MethodName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.Parameters != null) {
        if (struct.isSetParameters()) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Parameters.size()));
            for (ThriftSParameter _iter8 : struct.Parameters)
            {
              _iter8.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSRequestTupleSchemeFactory implements SchemeFactory {
    public ThriftSRequestTupleScheme getScheme() {
      return new ThriftSRequestTupleScheme();
    }
  }

  private static class ThriftSRequestTupleScheme extends TupleScheme<ThriftSRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.Headers.size());
        for (Map.Entry<String, String> _iter9 : struct.Headers.entrySet())
        {
          oprot.writeString(_iter9.getKey());
          oprot.writeString(_iter9.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetServiceName()) {
        optionals.set(0);
      }
      if (struct.isSetMethodName()) {
        optionals.set(1);
      }
      if (struct.isSetParameters()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetServiceName()) {
        oprot.writeString(struct.ServiceName);
      }
      if (struct.isSetMethodName()) {
        oprot.writeString(struct.MethodName);
      }
      if (struct.isSetParameters()) {
        {
          oprot.writeI32(struct.Parameters.size());
          for (ThriftSParameter _iter10 : struct.Parameters)
          {
            _iter10.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map11 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.Headers = new HashMap<String,String>(2*_map11.size);
        String _key12;
        String _val13;
        for (int _i14 = 0; _i14 < _map11.size; ++_i14)
        {
          _key12 = iprot.readString();
          _val13 = iprot.readString();
          struct.Headers.put(_key12, _val13);
        }
      }
      struct.setHeadersIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ServiceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.MethodName = iprot.readString();
        struct.setMethodNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Parameters = new ArrayList<ThriftSParameter>(_list15.size);
          ThriftSParameter _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new ThriftSParameter();
            _elem16.read(iprot);
            struct.Parameters.add(_elem16);
          }
        }
        struct.setParametersIsSet(true);
      }
    }
  }

}

